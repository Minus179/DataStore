document.addEventListener("DOMContentLoaded", () => {
  const suaTab = document.getElementById("sua");
  const title = document.getElementById("edit-title");

  // T·∫°o ho·∫∑c l·∫•y container ch·ª©a form ch·ªânh s·ª≠a v√† card ƒë∆∞·ª£c ch·ªçn
  let editContainer = document.getElementById("edit-container");
  if (!editContainer) {
    editContainer = document.createElement("div");
    editContainer.id = "edit-container";
    Object.assign(editContainer.style, {
      display: "none",
      flexWrap: "nowrap",
      gap: "24px",
      justifyContent: "flex-start",
      alignItems: "flex-start",
      marginTop: "40px",
    });
    suaTab.appendChild(editContainer);
  }

  // T·∫°o ho·∫∑c l·∫•y panel info ch·ª©a form ch·ªânh s·ª≠a
  let infoPanel = document.getElementById("edit-info-panel");
  if (!infoPanel) {
    infoPanel = document.createElement("div");
    infoPanel.id = "edit-info-panel";
    Object.assign(infoPanel.style, {
      display: "none",
    });
    editContainer.appendChild(infoPanel);
  }

  let currentEditingCard = null;

  // Reset UI v·ªÅ tr·∫°ng th√°i ban ƒë·∫ßu (hi·ªÉn th·ªã ƒë·∫ßy ƒë·ªß card, ·∫©n form)
  function resetEditUI() {
    if (title) title.style.display = "block";
    editContainer.style.display = "none";
    infoPanel.style.display = "none";

    // Show l·∫°i t·∫•t c·∫£ card menu
    suaTab
      .querySelectorAll(".menu-card")
      .forEach((c) => (c.style.display = "block"));

    // N·∫øu card ƒëang ch·ªânh s·ª≠a ƒë√£ ƒë∆∞·ª£c di chuy·ªÉn v√†o editContainer, tr·∫£ l·∫°i suaTab
    if (currentEditingCard && !suaTab.contains(currentEditingCard)) {
      suaTab.appendChild(currentEditingCard);
      Object.assign(currentEditingCard.style, {
        display: "block",
        transform: "none",
        boxShadow: "none",
        borderRadius: "none",
        maxWidth: "none",
        width: "auto",
        margin: "0",
        transition: "none",
      });
    }

    currentEditingCard = null;
  }

  suaTab.addEventListener("click", (e) => {
    const btn = e.target.closest(".edit-btn");
    if (!btn) return;

    const card = btn.closest(".menu-card");
    if (!card) return;

    currentEditingCard = card;

    // L·∫•y d·ªØ li·ªáu t·ª´ card
    const id = card.dataset.id || "";
    const name = card.querySelector("h4")?.textContent.trim() || "";
    const priceStr =
      card.querySelector("p")?.textContent.replace(/[‚Ç´.,\s]/g, "") || "0";
    const price = parseInt(priceStr, 10) || 0;
    const type = card.dataset.type || "food";
    const description = card.dataset.description || "";
    const imageSrc = card.querySelector("img")?.src || "";

    // ·∫®n ti√™u ƒë·ªÅ ch√≠nh n·∫øu c√≥
    if (title) title.style.display = "none";

    // ·∫®n t·∫•t c·∫£ card ƒë·ªÉ ch·ªâ hi·ªÉn th·ªã card ƒëang ch·ªânh s·ª≠a
    suaTab
      .querySelectorAll(".menu-card")
      .forEach((c) => (c.style.display = "none"));

    // X√≥a n·ªôi dung c≈© c·ªßa editContainer
    editContainer.innerHTML = "";
    editContainer.style.display = "flex";

    // Style cho card ƒëang edit
    Object.assign(card.style, {
      display: "block",
      transform: "scale(1)",
      boxShadow: "0 2px 8px rgba(0,0,0,0.1)",
      borderRadius: "8px",
      maxWidth: "320px",
      width: "100%",
      margin: "0 20px 0 0",
      transition: "transform 0.3s ease, box-shadow 0.3s ease",
    });

    // Di chuy·ªÉn card v√†o editContainer
    editContainer.appendChild(card);

    // Style cho infoPanel (form)
    Object.assign(infoPanel.style, {
      display: "block",
      background: "#fff",
      padding: "24px",
      borderRadius: "12px",
      boxShadow: "0 4px 20px rgba(0,0,0,0.1)",
      flex: "1",
      minWidth: "360px",
      fontFamily: "Segoe UI, sans-serif",
      color: "#333",
    });

    // T·∫°o form HTML trong infoPanel, pre-fill data t·ª´ card
    infoPanel.innerHTML = `
      <h3 style="margin-top: 0; margin-bottom: 15px; text-align:center;">Ch·ªânh s·ª≠a th√¥ng tin m√≥n</h3>
      ${
        imageSrc
          ? `<img src="${imageSrc}" alt="H√¨nh m√≥n" style="width: 250px; height: 200px; object-fit: cover; border-radius: 8px; margin: 0 auto 15px; display: block;">`
          : ""
      }
      <form id="edit-form" enctype="multipart/form-data" style="display: flex; gap: 20px; flex-wrap: wrap;">
        <input type="hidden" name="id" value="${id}">
        <div style="flex: 1 1 45%; display: flex; flex-direction: column; gap: 10px;">
          <label for="name">T√™n m√≥n:</label>
          <input type="text" name="name" value="${name}" required>
          <label for="price">Gi√° (VNƒê):</label>
          <input type="number" name="price" value="${price}" required min="0">
          <label for="type">Lo·∫°i m√≥n:</label>
          <select name="type">
            <option value="food" ${
              type === "food" ? "selected" : ""
            }>M√≥n ƒÉn</option>
            <option value="drink" ${
              type === "drink" ? "selected" : ""
            }>Th·ª©c u·ªëng</option>
          </select>
        </div>
        <div style="flex: 1 1 45%; display: flex; flex-direction: column; gap: 10px;">
          <label for="description">M√¥ t·∫£:</label>
          <textarea name="description" rows="6">${description}</textarea>
          <label for="image">H√¨nh ·∫£nh m·ªõi:</label>
          <input type="file" name="image" accept="image/*">
          <div style="display: flex; justify-content: flex-end; gap: 10px; margin-top: auto;">
            <button type="submit" style="background-color: #28a745; color: white; border: none; padding: 8px 12px; border-radius: 5px;">L∆∞u</button>
            <button type="button" id="cancel-edit" style="background-color: #ccc; border: none; padding: 8px 12px; border-radius: 5px;">H·ªßy</button>
            <button type="button" id="back-tab" style="background-color: #007bff; color: white; border: none; padding: 8px 12px; border-radius: 5px;">Quay l·∫°i</button>
          </div>
        </div>
      </form>
    `;

    const form = document.getElementById("edit-form");
    const cancelBtn = document.getElementById("cancel-edit");
    const backTabBtn = document.getElementById("back-tab");

    // B·ªè ƒëƒÉng k√Ω s·ª± ki·ªán c≈© ƒë·ªÉ tr√°nh tr√πng l·∫∑p
    form.onsubmit = null;
    cancelBtn.onclick = null;
    backTabBtn.onclick = null;

    // X·ª≠ l√Ω submit form
    form.addEventListener("submit", async (event) => {
      event.preventDefault();

      const submitBtn = form.querySelector('button[type="submit"]');
      submitBtn.disabled = true;
      submitBtn.textContent = "ƒêang l∆∞u...";

      const formData = new FormData(form);

      try {
        const response = await fetch("edit/sua.php", {
          method: "POST",
          body: formData,
        });

        const result = await response.json();

        if (response.ok && result.success) {
          alert("C·∫≠p nh·∫≠t m√≥n ƒÉn th√†nh c√¥ng! üéâ");

          // C·∫≠p nh·∫≠t tr·ª±c ti·∫øp d·ªØ li·ªáu l√™n card ƒëang ch·ªânh s·ª≠a
          if (currentEditingCard) {
            currentEditingCard.querySelector("h4").textContent =
              formData.get("name");
            currentEditingCard.querySelector("p").textContent =
              Number(formData.get("price")).toLocaleString("vi-VN") + " ‚Ç´";
            currentEditingCard.dataset.type = formData.get("type");
            currentEditingCard.dataset.description =
              formData.get("description");

            if (result.imageUrl) {
              const img = currentEditingCard.querySelector("img");
              if (img) img.src = result.imageUrl;
            }
          }

          // Reset UI v·ªÅ tr·∫°ng th√°i ban ƒë·∫ßu
          resetEditUI();
        } else {
          alert("L·ªói c·∫≠p nh·∫≠t: " + (result.message || "Kh√¥ng x√°c ƒë·ªãnh"));
        }
      } catch (error) {
        alert("L·ªói k·∫øt n·ªëi ho·∫∑c x·ª≠ l√Ω: " + error.message);
      } finally {
        submitBtn.disabled = false;
        submitBtn.textContent = "L∆∞u";
      }
    });

    // X·ª≠ l√Ω n√∫t h·ªßy
    cancelBtn.addEventListener("click", () => {
      resetEditUI();
    });

    // X·ª≠ l√Ω n√∫t quay l·∫°i
    backTabBtn.addEventListener("click", () => {
      resetEditUI();
    });
  });
});
